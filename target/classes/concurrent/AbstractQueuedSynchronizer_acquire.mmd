sequenceDiagram
    autonumber
actor User
User ->> AbstractQueuedSynchronizer : 调用acquire(1)
activate AbstractQueuedSynchronizer
note over AbstractQueuedSynchronizer: 下面一步具体调用ReentrantLock.Sync.nonfairTryAcquire
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : 调用tryAcquire(1)尝试获取锁
Note over AbstractQueuedSynchronizer,Thread: 下面首次调用先初始化链表：acquireQueued(addWaiter(Node.EXCLUSIVE), arg)
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : 第二步获取失败后会调用addWaiter初始化链表节点
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Thread : currentThread获取当前线程
activate Thread
Thread -->> AbstractQueuedSynchronizer : #32; 
deactivate Thread
AbstractQueuedSynchronizer ->> Node : new Node(currentThread, mode)
activate Node
Node -->> AbstractQueuedSynchronizer : #32; 
deactivate Node

alt 判断尾节点是否为null，(pred != null) 首次调用为假
note over AbstractQueuedSynchronizer: 本质是双向链表尾插法
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetTail
end

AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : enq入队列
activate AbstractQueuedSynchronizer
loop :一个自旋操作，保证一定能初始化表头节点且能够入队列
alt t == null
AbstractQueuedSynchronizer ->> Node : new初始化表头head节点
activate Node
Node -->> AbstractQueuedSynchronizer : #32; 
deactivate Node
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetHead
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapObject
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
else 
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetTail尾插法入队
end
end

AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : 调用acquireQueued方法
activate AbstractQueuedSynchronizer
loop 
AbstractQueuedSynchronizer ->> Node : predecessor
activate Node
Node -->> AbstractQueuedSynchronizer : #32; 
deactivate Node
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : tryAcquire
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer

AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : shouldParkAfterFailedAcquire
activate AbstractQueuedSynchronizer
alt ws == Node.SIGNAL
note right of AbstractQueuedSynchronizer : Empty
end
alt ws > 0
loop pred.waitStatus > 0
note right of AbstractQueuedSynchronizer : Empty
end
else 
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetWaitStatus
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapInt
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
end
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : parkAndCheckInterrupt
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> LockSupport : park
activate LockSupport
LockSupport -->> AbstractQueuedSynchronizer : #32; 
deactivate LockSupport
AbstractQueuedSynchronizer ->> Thread : interrupted
activate Thread
Thread -->> AbstractQueuedSynchronizer : #32; 
deactivate Thread
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
alt shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()
note right of AbstractQueuedSynchronizer : Empty
end
note right of AbstractQueuedSynchronizer : Empty
end
alt failed
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : cancelAcquire
activate AbstractQueuedSynchronizer
alt node == null
note right of AbstractQueuedSynchronizer : Empty
end
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetTail
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapObject
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
alt node == tail && compareAndSetTail(node, pred)
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetNext
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapObject
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
else 
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetWaitStatus
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapInt
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
alt pred != head && ((ws = pred.waitStatus) == Node.SIGNAL ||(ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) && pred.thread != null
alt next != null && next.waitStatus <= 0
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetNext
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapObject
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
end
else 
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : unparkSuccessor
activate AbstractQueuedSynchronizer
alt ws < 0
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : compareAndSetWaitStatus
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Unsafe : compareAndSwapInt
activate Unsafe
Unsafe -->> AbstractQueuedSynchronizer : #32; 
deactivate Unsafe
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
end
alt s == null || s.waitStatus > 0
loop t != null && t != node
alt t.waitStatus <= 0
note right of AbstractQueuedSynchronizer : Empty
end
note right of AbstractQueuedSynchronizer : Empty
end
note right of AbstractQueuedSynchronizer : Empty
end
alt s != null
AbstractQueuedSynchronizer ->> LockSupport : unpark
activate LockSupport
LockSupport -->> AbstractQueuedSynchronizer : #32; 
deactivate LockSupport
end
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
end
end
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
end
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
alt !tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)
AbstractQueuedSynchronizer ->> AbstractQueuedSynchronizer : selfInterrupt
activate AbstractQueuedSynchronizer
AbstractQueuedSynchronizer ->> Thread : currentThread
activate Thread
Thread -->> AbstractQueuedSynchronizer : #32; 
deactivate Thread
AbstractQueuedSynchronizer ->> Thread : interrupt
activate Thread
Thread -->> AbstractQueuedSynchronizer : #32; 
deactivate Thread
AbstractQueuedSynchronizer -->> AbstractQueuedSynchronizer : #32; 
deactivate AbstractQueuedSynchronizer
end
deactivate AbstractQueuedSynchronizer
